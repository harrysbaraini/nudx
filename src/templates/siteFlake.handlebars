{
  inputs = {
    nixpkgs = { url = "github:NixOS/nixpkgs"; };
    flake-utils = { url = "github:numtide/flake-utils"; };
    {{#each inputs}}
    {{@key}} = {{{this}}};
    {{/each}}
  };

  outputs = { self, nixpkgs, flake-utils, {{inputsKeys}} }:
  flake-utils.lib.eachDefaultSystem (system:
  let
    pkgs = import nixpkgs { inherit system; config.allowUnfree = true; };
    lib = pkgs.lib;

    services = { };

    ###
    ### Services
    ###

    {{#each outputs as | output |}}
    {{#each output}}
    {{{.}}}
    {{/each}}
    {{/each}}

    ###
    ### Process runner
    ###

    env.PROJECT_SHELL_ENV="{{project.shellenvPath}}";
    env.PROJECT_PROCFILE="{{project.configPath}}/processes.json";

    servicesValues = lib.attrsets.zipAttrs (lib.attrsets.attrValues services);

    cli.state = {
      names = servicesValues.name or [ ];
      env = lib.lists.flatten (servicesValues.env or [ ]);
      packages = defaultPackages ++ (lib.lists.flatten (servicesValues.packages or [ ]));
      processes = lib.lists.flatten (servicesValues.processes or [ ]);
      shellHooks = servicesValues.shellHook or [ ];
    };

    processesFile = pkgs.writeText "processes.json" (
      builtins.toJSON {
        environment = builtins.listToAttrs cli.state.env;
        processes = cli.state.processes;
      }
    );

    # SCRIPT : Hooks
    run_hooks = pkgs.writeShellScriptBin "run_hooks" ''
      for hook in "$@"
      do
        echo "Running hook: $hook"
        $hook
      done
    '';

    ###
    ### Group all packages
    ###

    defaultPackages = with pkgs; [
      unixtools.netstat
      hostctl
      run_hooks
    ];
  in
  {
    devShell = pkgs.mkShell {
      buildInputs = cli.state.packages;

      shellHook = ''
        if [[ ! -f "${env.PROJECT_PROCFILE}" ]]; then
          cp -f ${processesFile} ${env.PROJECT_PROCFILE}
        fi

        # Load environment variables
        if [[ ! -f "${env.PROJECT_SHELL_ENV}" ]]; then
          echo -e "${lib.strings.concatStringsSep ''\n'' (lib.lists.forEach cli.state.env (x: ''${x.name}=${x.value}''))}" >> ${env.PROJECT_SHELL_ENV}
        fi

        set -o allexport
        source ${env.PROJECT_SHELL_ENV}
        set +o allexport

        # Service hooks
        ${lib.strings.concatStringsSep "\n" cli.state.shellHooks}
      '';
    };
  });
}
