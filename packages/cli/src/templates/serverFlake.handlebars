{
  # Flake inputs
  inputs = {
      nixpkgs.url = "github:NixOS/nixpkgs";
      flake-utils = { url = "github:numtide/flake-utils"; };
  };

  # Flake outputs
  outputs = { self, nixpkgs, flake-utils }:
  flake-utils.lib.eachDefaultSystem (system:
  let
    pkgs = import nixpkgs { inherit system; };

    # Build Caddy
    caddy = with pkgs; stdenv.mkDerivation rec {
      pname = "caddy";
      version = "2.6.4";
      dontUnpack = true;
      nativeBuildInputs = [ git go xcaddy ];
      plugins = [
        "github.com/mholt/caddy-l4/layer4"
        "github.com/mholt/caddy-l4/modules/l4http"
        "github.com/mholt/caddy-l4/modules/l4proxy"
      ];

      configurePhase = ''
        export GOCACHE=$TMPDIR/go-cache
        export GOPATH="$TMPDIR/go"
      '';

      buildPhase = let
        pluginArgs = lib.concatMapStringsSep " " (plugin: "--with ${plugin}") plugins;
      in ''
        runHook preBuild
        ${xcaddy}/bin/xcaddy build "v${version}" ${pluginArgs}
        runHook postBuild
      '';

      installPhase = ''
        runHook preInstall
        mkdir -p $out/bin
        mv caddy $out/bin
        runHook postInstall
      '';
    };

    basicCaddyConfig = pkgs.writeText "Caddyfile" ''
      {{{basicCaddyConfig}}}
    '';

    env.CLI_SOCKET="{{statePath}}/nudxserver.sock";
    env.CLI_PID="{{statePath}}/nudx.pid";
    env.CLI_LOCK="{{statePath}}/nudx.lock";
    env.CLI_PROCESSES_FILE="{{configPath}}/processes.json";

    # SCRIPT - Run Caddy
    runCaddy = pkgs.writeShellScriptBin "runCaddy" ''
      exec ${caddy}/bin/caddy run --config ${basicCaddyConfig}
    '';

    # SCRIPT - Start Server
    startServer = pkgs.writeShellScriptBin "startServer" ''
      if [[ ! -d "{{statePath}}" ]]; then
        mkdir -p {{statePath}}
      fi

      if [[ "$1" == "daemon" ]]; then
        ${pkgs.daemonize}/bin/daemonize -p ${env.CLI_PID} -l ${env.CLI_LOCK} -c {{statePath}} ${pkgs.process-compose}/bin/process-compose up $2 -t=false -f ${env.CLI_PROCESSES_FILE}
        echo "Server started!"
      elif [[ "$1" == "tui" ]]; then
        exec ${pkgs.process-compose}/bin/process-compose up $2 -f ${env.CLI_PROCESSES_FILE}
      else
        echo "First argument cannot be processed! It must be 'daemon' or 'tui'"
        exit 1;
      fi
    '';

    # Packages
    packages = with pkgs; [process-compose caddy startServer runCaddy];
  in
  {
    devShell = pkgs.mkShell {
      buildInputs = packages;

      shellHook = ''
        {{#each sites}}
        # ENV - {{site.id}}
        set -o allexport
        source {{shellenvPath}}
        set +o allexport

        {{/each}}
      '';
    };
  });
}
