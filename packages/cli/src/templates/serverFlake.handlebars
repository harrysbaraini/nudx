{
  # Flake inputs
  inputs = {
      nixpkgs.url = "github:NixOS/nixpkgs";
      flake-utils = { url = "github:numtide/flake-utils"; };
  };

  # Flake outputs
  outputs = { self, nixpkgs, flake-utils }:
  flake-utils.lib.eachDefaultSystem (system:
  let
    pkgs = import nixpkgs { inherit system; };

    # Build Caddy
    caddy = with pkgs; stdenv.mkDerivation rec {
      pname = "caddy";
      version = "2.6.4";
      dontUnpack = true;
      nativeBuildInputs = [ git go xcaddy ];
      plugins = [];

      configurePhase = ''
        export GOCACHE=$TMPDIR/go-cache
        export GOPATH="$TMPDIR/go"
      '';

      buildPhase = let
        pluginArgs = lib.concatMapStringsSep " " (plugin: "--with ${plugin}") plugins;
      in ''
        runHook preBuild
        ${xcaddy}/bin/xcaddy build "v${version}" ${pluginArgs}
        runHook postBuild
      '';

      installPhase = ''
        runHook preInstall
        mkdir -p $out/bin
        mv caddy $out/bin
        runHook postInstall
      '';
    };

    # Hostctl
    remove_hosts_profile = pkgs.writeShellScriptBin "remove_hosts_profile" ''
      sudo ${pkgs.hostctl}/bin/hostctl remove $@
    '';

    status_hosts_profile = pkgs.writeShellScriptBin "status_hosts_profile" ''
      enabled=$(sudo ${pkgs.hostctl}/bin/hostctl status --raw) | awk -v profile=$1 '(NR>1 && $1==profile) {print 1}'
      if [[ "$enabled" == "1" ]]; then
        echo "on"
      else
        echo "off"
      fi
    '';

    create_hosts_profile = pkgs.writeShellScriptBin "create_hosts_profile" ''
      status=(${status_hosts_profile}/bin/status_hosts_profile $1)
      if [[$status == "on"]]; then
        ${remove_hosts_profile}/bin/remove_hosts_profile $1
      fi

      sudo ${pkgs.hostctl}/bin/hostctl add domains $@
    '';

    enable_hosts_profile = pkgs.writeShellScriptBin "enable_hosts_profile" ''
      sudo ${pkgs.hostctl}/bin/hostctl enable $@
    '';

    disable_hosts_profile = pkgs.writeShellScriptBin "disable_hosts_profile" ''
      sudo ${pkgs.hostctl}/bin/hostctl disable $@
    '';

    # Packages
    packages = [ pkgs.hostctl caddy create_hosts_profile remove_hosts_profile enable_hosts_profile disable_hosts_profile ];
  in
  {
    devShell = pkgs.mkShell {
      buildInputs = packages;

      shellHook = ''
        if [[ -d "{{binPath}}" ]]; then
          rm -rf {{binPath}}
        fi

        mkdir -p {{binPath}}
        ln -s ${caddy}/bin/caddy {{binPath}}/caddy
        ln -s ${pkgs.hostctl}/bin/hostctl {{binPath}}/hostctl
      '';
    };
  });
}
