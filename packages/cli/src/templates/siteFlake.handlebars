{
  inputs = {
    nixpkgs = { url = "github:NixOS/nixpkgs"; };
    flake-utils = { url = "github:numtide/flake-utils"; };
  };

  outputs = { self, nixpkgs, flake-utils }:
  flake-utils.lib.eachDefaultSystem (system:
  let
    pkgs = import nixpkgs {
      inherit system;

      # Makes the config pure as well.
      config.allowBroken = true;
      config.allowUnfree = true;
      config.permittedInsecurePackages = [
        "openssl-1.1.1t"
      ];
    };

    ### Services
    services = {
      {{#each services as | service |}}
      {{service.name}} = import {{service.file}} {
          inherit pkgs;
          inherit system;
          config = builtins.fromJSON ''{{{service.config}}}'';
      };
      {{/each}}
    };

    cli = import {{cliNix}} {
        inherit pkgs;
        inherit system;
        envPrefix = "{{envPrefix}}";
        directory = "{{project.basePath}}";
        services = services;
    };

    generated_at = "{{generatedAt}}";
  in
  {
    packages = cli.packages;

    devShell = cli.lib.mkShell {
      name = "{{id}}";
      packages = cli.packages;

      shellHook = ''
         if [[ ! -f "${cli.PROJECT_PROCFILE}" ]]; then
           cp -f ${cli.files.processesFile} ${cli.PROJECT_PROCFILE}
         fi

         # Load environment variables
         if [[ ! -f "${cli.PROJECT_SHELL_ENV}" ]]; then
          touch ${cli.PROJECT_SHELL_ENV}
          echo -e "NUDX_PROJECT_GENERATED_AT=${generated_at}" > ${cli.PROJECT_SHELL_ENV}
          echo -e "${pkgs.lib.strings.concatStringsSep ''\n'' (pkgs.lib.lists.forEach cli.env (x: ''${cli.ENV_PREFIX}_${x.name}=${builtins.toString x.value}''))}" > ${cli.PROJECT_SHELL_ENV}
         fi

         set -o allexport
         source ${cli.PROJECT_SHELL_ENV}
         set +o allexport

         # Service hooks
         ${pkgs.lib.strings.concatStringsSep "\n" cli.shellHooks}
      '';
    };
  });
}
